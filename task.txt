import scala.util.control.Breaks._
object jugproblem {
  def pour(fromCap: Int, toCap: Int, d: Int): Int = {
    // Initialize current amount of water
    // in source and destination jugs
    var from = fromCap;
    var to = 0;
    // Initialize count of steps required
    var step = 1; // Needed to fill "from" Jug

    // Break the loop when 4 gallon jugs has d litre water

    breakable {

      while (from != d) {
        // Find the maximum amount that can be
        // poured

        var temp = if (from > (toCap - to)) toCap - to else from;
        // Pour "temp" liters from "from" to "to"
        to += temp;
        from -= temp;

        // Increment count of steps
        step = step + 1;

 if (from == d)
          {
            println("suucessfull get the output");
            break;
          }

          // If first jug becomes empty, fill it
          if (from == 0) {
            from = fromCap;
            step = step + 1;
          }

          // If second jug becomes full, empty it
          if (to == toCap) {
            to = 0;
            step = step + 1;
          }
      }
    }
    step;
  }

  def main(args: Array[String]): Unit = {

    println("steps require is : " + pour(4, 3, 2))
  }
}

